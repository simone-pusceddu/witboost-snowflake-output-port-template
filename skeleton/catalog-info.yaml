%SKELETON
{% set domainNameNormalized = values.domain | replace(r/domain:| |-/, "") %}
{% set dataProductNameNormalized = values.dataproduct.split(".")[1] | replace(r/ |-/g, "") %}
{% set dataProductMajorVersion = values.identifier.split(".")[2] %}
{% set componentNameNormalized = values.name.split(" ") | join("") | lower %}

apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: ${{ values.identifier }}
  description: |
      ${{ values.description }}
  annotations:
    gitlab.com/project-slug: 'AgileDMBSandbox/${{orgname}}/mesh.repository/${{ domainNameNormalized }}/${{ dataProductNameNormalized }}/${{ componentNameNormalized }}'
    backstage.io/techdocs-ref: dir:.
  tags:
    - outputport
    - snowflake
spec:
  type: outputport
  lifecycle: experimental
  owner: ${{ values.developmentGroup }}
  system: ${{ values.dataproduct }}
  domain: ${{ values.domain }}
  mesh:
    name: ${{ values.name }}
    fullyQualifiedName: ${{ values.domainName }} - ${{ values.dataproductName }} - version ${{ dataProductMajorVersion }} - ${{ values.name }}
    description: |
      ${{ values.description }}
    kind: outputport
    version: ${{ dataProductMajorVersion + ".0.0" }}
    infrastructureTemplateId: ${{ values.infrastructureTemplateId }}
    useCaseTemplateId: ${{ values.useCaseTemplateId }}
    dependsOn: {% if values.dependsOn | length > 0 %}{% for i in values.dependsOn %}
      - ${{ i }}{% endfor %}{% else %}[]{% endif %}
    platform: Snowflake
    technology: Snowflake
    outputPortType: SQL
    creationDate: ${{ values.creationDate }}
    startDate: ${{ values.creationDate }}
    __dataContractEnabled: true
    dataContract:
      schema: {% if values.schemaColumns | length > 0 %}{% for i in values.schemaColumns %}
        - name: ${{ i.name }}
          dataType: ${{ i.dataType }}
          {%- if i.constraint is defined and i.constraint != '(no constraint)' %}
          constraint: ${{ i.constraint }}
          {%- endif %}
          {%- if i.dataLength is defined and i.dataType == 'TEXT' %}
          dataLength: ${{ i.dataLength }}
          {%- endif %}
          {%- if i.precision is defined and i.dataType == 'NUMBER' %}
          precision: ${{ i.precision }}
          {%- endif %}
          {%- if i.scale is defined and i.dataType == 'NUMBER' %}
          scale: ${{ i.scale }}
          {%- endif %}
          tags: {% if i.businessTerms | length > 0 or i.piiCheck %}
            {% if i.businessTerms | length > 0 %}
              {% for j in i.businessTerms %}
            - tagFQN: ${{ j }}
              source: Glossary
              labelType: Manual
              state: Confirmed
              {% endfor %}
            {% endif %}
            {% if i.piiCheck %}
            - tagFQN: PII
              source: Tag
              labelType: Manual
              state: Confirmed
            {% endif %}
          {% else %}[]{% endif %}{% endfor %}{% else %}[]{% endif %}
      termsAndConditions: ${{ values.termsAndConditions }}
      SLA:
        intervalOfChange: ${{ values.intervalOfChange }}
        timeliness: ${{ values.timeliness }}
        upTime: ${{ values.upTime }}
      quality: {% if values.expectationsSuite | length > 0 %}{% for i in values.expectationsSuite %}
        - type: custom
          engine: greatExpectations
          implementation:
            type: ${{ i.expectation_type }}
            args:
              {%- if i.column is defined %}
              column: ${{ i.column }}
              {%- endif %}
              {%- if i.min_value is defined %}
              min_value: ${{ i.min_value }}
              {%- endif %}
              {%- if i.max_value is defined %}
              max_value: ${{ i.max_value }}
              {%- endif %}
              {%- if i.strict_min is defined %}
              strict_min: ${{ i.strict_min }}
              {%- endif %}
              {%- if i.strict_max is defined %}
              strict_max: ${{ i.strict_max }}
              {%- endif %}
              {%- if i.value_set is defined and not i.value_set is string and i.value_set | length > 0 and i.value_set | first | length > 0 %}
              value_set:
                {%- for j in i.value_set %}
                - '${{ j }}'
                {%- endfor %}
              {%- endif %}
              {%- if i.regex is defined %}
              regex: '${{ i.regex | safe }}'
              {%- endif %}
        {% endfor %}{% else %}[]{% endif %}
    dataSharingAgreement:
      purpose: ${{ values.purpose }}
      billing: ${{ values.billing }}
      security: ${{ values.security }}
      intendedUsage: ${{ values.intendedUsage }}
      limitations: ${{ values.limitations }}
      lifeCycle: ${{ values.lifeCycle }}
      confidentiality: ${{ values.confidentiality }}
    tags: {% if values.tags | length > 0 %}{% for i in values.tags %}
      - tagFQN: ${{ i }}
        source: Tag
        labelType: Manual
        state: Confirmed{% endfor %}{% else %}[]{% endif %}
    sampleData: {}
    semanticLinking: []
    specific:
      viewName: ${{ values.viewName | upper }}
      tableName: ${{ values.tableName | upper }}
      database: {% if (values.database | length) == 0 %}
        {% set finalDatabaseName = domainNameNormalized %}
        {% else %}
        {% set finalDatabaseName = values.database | replace(r/ |-/, "") %}
        {% endif %}
        ${{ finalDatabaseName | upper }}
      schema: {% if (values.schema | length) == 0 %}
        {% set finalSchemaName = dataProductNameNormalized + "_" + dataProductMajorVersion %}
        {% else %}
        {% set finalSchemaName = values.schema | replace(r/ |-/, "") %}
        {% endif %}
        ${{ finalSchemaName | upper }}
